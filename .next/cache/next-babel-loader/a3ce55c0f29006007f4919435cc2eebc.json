{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Code } from \"@chakra-ui/core\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `Validating Inputs`), mdx(\"hr\", null), mdx(\"p\", null, `   All kinds of input form can be validated, this example can be applied in every kind.\nBy default, useForm work with yup validation schema, and you can pass a\nvalidation schema as a parameter in `, mdx(Code, {\n    mdxType: \"Code\"\n  }, `useForm`), ` hook.`), mdx(Code, {\n    mdxType: \"Code\"\n  }, \"const [] = useForm(\", \"validation\", \")\"), mdx(\"p\", null, `   The validation is run every time the state is changed. By default the `, mdx(Code, {\n    mdxType: \"Code\"\n  }, `useForm`), ` uses the option uncontrolled inputs, it means that values are accessible when onSubmit event is dispatched.`), mdx(\"p\", null, `   If you want to custom the validation it is possible to import useValidation hook.`), mdx(\"p\", null, `   This hook receives the values and a yup validation schema, and return the object errors in every chenge.`), mdx(\"p\", null, `   `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import {useValidation} from 'useforms`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}