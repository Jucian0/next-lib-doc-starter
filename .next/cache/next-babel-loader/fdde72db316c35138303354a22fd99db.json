{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport { Code } from \"@chakra-ui/core\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `Debounce Inputs`), mdx(\"hr\", null), mdx(Code, {\n    mdxType: \"Code\"\n  }, \"Debounce function forces a function to wait a certain amount of time before running again. The function is built to limit the number of times a function is called.\"), mdx(\"p\", null, `   The debounce parameter delays the updating of the state until the user has stopped changing inputs for a predetermined amount of time.`), mdx(\"br\", null), \"The input value be set to state values and then updated via React events. Defining a form\\u2019s input value via state is considered a controlled component. For controlled inputs you will need a corresponding state and then a function to update that state with changes.\", mdx(\"span\", {\n    style: {\n      color: \"#5bc0be\"\n    }\n  }, mdx(\"p\", null, `   `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/forms.html\"\n  }), `React Docs`))), mdx(\"br\", null), \"It means that every change in state your component, it is mounted again.\", mdx(\"p\", null, `   If you want to use this kind of form, you need only pass property `, mdx(Code, {\n    mdxType: \"Code\"\n  }, `debounce:300`), ` whit a time in object received in `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `useForm`), ` hook.`), mdx(\"br\", null), \"Also, it means that the validations are run in every state change, providing better user feedback.\", mdx(\"br\", null), mdx(\"br\", null), \"See more in Controlled Inputs with validation.\");\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}