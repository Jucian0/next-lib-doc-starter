{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport { useForm } from 'useforms';\nimport { CopyBlock, dracula } from 'react-code-blocks';\nimport dynamic from 'next/dynamic';\nimport * as yup from 'yup';\nimport { Row, Col } from 'react-grid-system';\nimport { Box, Input, Stack, Button, ButtonGroup, Checkbox, Text } from \"@chakra-ui/core\";\nconst ReactJson = dynamic(() => import('react-json-view'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-json-view')],\n    modules: ['react-json-view']\n  }\n});\nconst Docs = dynamic(() => import('./withValidation.mdx'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./withValidation.mdx')],\n    modules: ['./withValidation.mdx']\n  }\n});\nconst initialValues = {\n  name: \"\",\n  email: \"jesse@jesse.com\",\n  pets: [\"felix\"],\n  accept: false\n};\nconst validation = yup.object().shape({\n  name: yup.string().required(\"This field is required\"),\n  email: yup.string().email(\"This field must be a valid e-mail\").required(\"This field is required\"),\n  pets: yup.array(yup.string().required(\"This field is required\"))\n});\nexport default function ControlledFormWithValidation() {\n  var _touched$pets, _errors$pets;\n\n  const [{\n    values,\n    reset,\n    errors,\n    touched\n  }, {\n    input\n  }] = useForm({\n    onChange: true,\n    initialValues,\n    validation\n  });\n  const codeBlock = `\n      import {useForm} from 'useforms'\n\n      const initialValues = {\n         name:\"Jesse\",\n         email:\"jesse@jesse.com\",\n         pets:[\"felix\"],\n         accept:false\n\n      }\n\n      const validation = yup.object().shape({\n         name: yup.string().required(\"This field is required\"),\n         email: yup.string().email(\"This field must be a valid e-mail\").required(\"This field is required\"),\n         pets: yup.array(yup.string().required(\"This field is required\"))\n      })\n\n      function ControlledForm(){\n\n         const [{values, reset},{input}] = useForm({onChange:true, initialValues, validation})\n         return (\n            <>\n               <input {...input(\"email\", \"email\")}/>\n               <span>{touched.email && errors.email}</span>\n               <input {...input(\"password\" ,\"password\")}/>   \n               <span>{touched.name && errors.name}</span>         \n               <input {...input(\"pets.0\" ,\"text\")}/>     \n               <span>{touched.pets?.[0] && errors?.[0]}</span>    \n               <input {...input(\"accept\", \"checkbox\")}/>\n            </>   \n         )\n      }\n   `;\n  return __jsx(Box, {\n    marginTop: 20\n  }, __jsx(Row, null, __jsx(Col, {\n    lg: 6\n  }, __jsx(CopyBlock, {\n    text: codeBlock,\n    language: \"jsx\",\n    showLineNumbers: true,\n    theme: dracula,\n    codeBlock: true\n  })), __jsx(Col, {\n    lg: 6\n  }, __jsx(ReactJson, {\n    src: values,\n    theme: \"colors\",\n    style: {\n      borderRadius: 3,\n      padding: 15,\n      height: '50%'\n    },\n    name: \"values\"\n  }), __jsx(ReactJson, {\n    src: errors,\n    theme: \"colors\",\n    style: {\n      borderRadius: 3,\n      padding: 15,\n      height: '50%'\n    },\n    name: \"errors\"\n  }))), __jsx(Row, null, __jsx(Col, {\n    lg: 6\n  }, __jsx(Box, {\n    padding: \"5\",\n    borderWidth: 1,\n    borderRadius: 4,\n    marginTop: 10\n  }, __jsx(Stack, {\n    spacing: 3\n  }, __jsx(Input, _extends({\n    placeholder: \"E-mail\",\n    size: \"lg\"\n  }, input(\"email\", \"email\"), {\n    errorBorderColor: \"red.300\",\n    isInvalid: touched.email && errors.email\n  })), __jsx(Text, {\n    color: \"red.300\"\n  }, touched.email && errors.email), __jsx(Input, _extends({\n    placeholder: \"Name\",\n    size: \"lg\"\n  }, input(\"name\", \"text\"))), __jsx(Text, {\n    color: \"red.300\"\n  }, touched.name && errors.name), __jsx(Input, _extends({\n    placeholder: \"Pets\",\n    size: \"lg\"\n  }, input(\"pets.0\", \"text\"))), __jsx(Text, {\n    color: \"red.300\"\n  }, ((_touched$pets = touched.pets) === null || _touched$pets === void 0 ? void 0 : _touched$pets[0]) && ((_errors$pets = errors.pets) === null || _errors$pets === void 0 ? void 0 : _errors$pets[0])), __jsx(Checkbox, input(\"accept\", \"checkbox\"), \"Checkbox\"), __jsx(ButtonGroup, {\n    spacing: 4\n  }, __jsx(Button, {\n    variantColor: \"teal\",\n    size: \"lg\",\n    onClick: reset\n  }, \"Reset\"), __jsx(Button, {\n    variantColor: \"teal\",\n    size: \"lg\",\n    onClick: () => {}\n  }, \"Submit\"))))), __jsx(Col, {\n    lg: 6\n  }, __jsx(Box, {\n    borderWidth: 1,\n    padding: 5,\n    borderRadius: 4,\n    marginTop: 10\n  }, __jsx(Docs, null)))));\n}","map":null,"metadata":{},"sourceType":"module"}