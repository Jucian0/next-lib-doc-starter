{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport { useForm } from 'useforms';\nimport { CopyBlock, dracula } from 'react-code-blocks';\nimport dynamic from 'next/dynamic';\nimport Select from 'react-select';\nimport DatePicker from \"react-datepicker\";\nimport { Row, Col } from 'react-grid-system';\nimport { Box, Stack, Button, ButtonGroup, FormControl } from \"@chakra-ui/core\";\nconst ReactJson = dynamic(() => import('react-json-view'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-json-view')],\n    modules: ['react-json-view']\n  }\n});\nconst Docs = dynamic(() => import('./customInputs.mdx'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./customInputs.mdx')],\n    modules: ['./customInputs.mdx']\n  }\n});\nconst initialValues = {\n  candies: {\n    iceCream: [{\n      value: 'chocolate',\n      label: 'Chocolate'\n    }]\n  },\n  date: new Date(\"05/26/2020\")\n};\nconst options = [{\n  value: 'chocolate',\n  label: 'Chocolate'\n}, {\n  value: 'strawberry',\n  label: 'Strawberry'\n}, {\n  value: 'vanilla',\n  label: 'Vanilla'\n}];\nexport default function CustomInputs() {\n  const [{\n    values,\n    reset\n  }, {\n    custom\n  }] = useForm({\n    onChange: true,\n    initialValues\n  });\n  const codeBlock = `\n      import {useForm} from 'useforms'\n\n      const initialValues = {\n         candies:{\n            iceCream:[\n               { value: 'chocolate', label: 'Chocolate' }\n            ]\n         },\n         date: new Date(\"05/26/2020\")\n      }\n      \n      const options = [\n         { value: 'chocolate', label: 'Chocolate' },\n         { value: 'strawberry', label: 'Strawberry' },\n         { value: 'vanilla', label: 'Vanilla' }\n       ]      \n\n      function ControlledForm(){\n\n         const [{values, reset},{input}] = useForm({onChange:true, initialValues})\n         return (\n            <>\n               <Select options={options} {...custom(\"candies.iceCream.0\")} />\n               <DatePicker\n                  className=\"form-control mw-100\"\n                  showPopperArrow={false}\n                  selected={values.date}\n                  {...custom(\"date\")}\n               /> \n            </>   \n         )\n      }\n   `;\n  return __jsx(Box, {\n    marginTop: 20\n  }, __jsx(Row, null, __jsx(Col, {\n    lg: 6,\n    id: \"code-block\"\n  }, __jsx(CopyBlock, {\n    className: \"code-block\",\n    text: codeBlock,\n    language: \"jsx\",\n    showLineNumbers: true,\n    theme: dracula,\n    codeBlock: true\n  })), __jsx(Col, {\n    lg: 6\n  }, __jsx(Box, {\n    w: true\n  }, __jsx(Box, null, __jsx(Docs, null)), __jsx(Box, {\n    padding: \"5\",\n    borderWidth: 1,\n    borderRadius: 4,\n    marginTop: 30\n  }, __jsx(Stack, {\n    spacing: 3\n  }, __jsx(Select, _extends({\n    className: \"custom-select\",\n    options: options\n  }, custom(\"candies.iceCream.0\"))), __jsx(FormControl, null, __jsx(DatePicker, _extends({\n    className: \"\",\n    showPopperArrow: false,\n    selected: values.date\n  }, custom(\"date\")))), __jsx(ButtonGroup, {\n    spacing: 4\n  }, __jsx(Button, {\n    variantColor: \"teal\",\n    size: \"lg\",\n    onClick: reset\n  }, \"Reset\"), __jsx(Button, {\n    variantColor: \"teal\",\n    size: \"lg\",\n    onClick: () => {}\n  }, \"Submit\")))), __jsx(Box, {\n    marginTop: 30\n  }, __jsx(ReactJson, {\n    src: values,\n    name: \"values\",\n    theme: \"colors\",\n    style: {\n      borderRadius: 3,\n      padding: 15,\n      height: '100%'\n    }\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}