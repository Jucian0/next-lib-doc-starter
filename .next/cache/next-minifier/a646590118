{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{RS7k:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return u}));var o=n(\"wx14\"),a=n(\"Ff2n\"),r=n(\"q1tI\"),s=n.n(r),c=n(\"7ljp\"),l=n(\"O5+3\"),b=(s.a.createElement,{}),i=\"wrapper\";function u(e){var t=e.components,n=Object(a.a)(e,[\"components\"]);return Object(c.b)(i,Object(o.a)({},b,n,{components:t,mdxType:\"MDXLayout\"}),Object(c.b)(\"h1\",null,\"Controlled Inputs\"),Object(c.b)(\"hr\",null),Object(c.b)(\"p\",null,\"   When uses controlled forms the input value be set to state values and then updated via React events.\\nDefining a form\\u2019s input value via state is considered a controlled component.\\nFor controlled inputs you will need a corresponding state and then a function to update that state with changes.\"),Object(c.b)(\"span\",{style:{color:\"#5bc0be\"}},Object(c.b)(\"p\",null,\"   \",Object(c.b)(\"a\",Object(o.a)({parentName:\"p\"},{href:\"https://reactjs.org/docs/forms.html\"}),\"React Docs\"))),Object(c.b)(\"br\",null),\"It means that every change in state your component, it is mounted again. If you want to use this kind of form, you need only pass property \",Object(c.b)(l.a,{mdxType:\"Code\"},\"onChange\"),\" in object received in `useForm` hook.\",Object(c.b)(\"br\",null),\"Also, it means that the validations are run in every state change, providing better user feedback.\",Object(c.b)(\"br\",null),Object(c.b)(\"br\",null),\"See more in Controlled Inputs with validation.\")}u.isMDXComponent=!0}}]);"}