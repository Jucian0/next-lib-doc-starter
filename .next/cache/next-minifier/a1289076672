{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{FXcj:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return l}));var o=n(\"wx14\"),a=n(\"Ff2n\"),i=n(\"q1tI\"),c=n.n(i),r=n(\"7ljp\"),u=n(\"O5+3\"),b=(c.a.createElement,{}),s=\"wrapper\";function l(e){var t=e.components,n=Object(a.a)(e,[\"components\"]);return Object(r.b)(s,Object(o.a)({},b,n,{components:t,mdxType:\"MDXLayout\"}),Object(r.b)(\"h1\",null,\"Debounce Inputs\"),Object(r.b)(\"hr\",null),Object(r.b)(u.a,{mdxType:\"Code\"},\"Debounce function forces a function to wait a certain amount of time before running again. The function is built to limit the number of times a function is called.\"),Object(r.b)(\"p\",null,\"   The debounce parameter delays the updating of the state until the user has stopped changing inputs for a predetermined amount of time.\"),Object(r.b)(\"br\",null),\"The input value be set to state values and then updated via React events. Defining a form\\u2019s input value via state is considered a controlled component. For controlled inputs you will need a corresponding state and then a function to update that state with changes.\",Object(r.b)(\"span\",{style:{color:\"#5bc0be\"}},Object(r.b)(\"p\",null,\"   \",Object(r.b)(\"a\",Object(o.a)({parentName:\"p\"},{href:\"https://reactjs.org/docs/forms.html\"}),\"React Docs\"))),Object(r.b)(\"br\",null),\"It means that every change in state your component, it is mounted again.\",Object(r.b)(\"p\",null,\"   If you want to use this kind of form, you need only pass property \",Object(r.b)(u.a,{mdxType:\"Code\"},\"debounce:300\"),\" whit a time in object received in \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"useForm\"),\" hook.\"),Object(r.b)(\"br\",null),\"Also, it means that the validations are run in every state change, providing better user feedback.\",Object(r.b)(\"br\",null),Object(r.b)(\"br\",null),\"See more in Controlled Inputs with validation.\")}l.isMDXComponent=!0}}]);"}